// app/sitemap.ts
import { MetadataRoute } from 'next';

export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';

const LOCALES = ['es', 'en'] as const;

const STATIC_FOLDERS = [
  '', // locale root â†’ /es or /en
  'before-after',
  'contact',
  'main',
  'medical-tourism',
  'team',
] as const;

async function fetchServiceIds(): Promise<{ id: string; updatedAt: string }[]> {
  try {
    const res = await fetch('https://api.guillendentalcare.com/services');
    if (!res.ok) {
      console.error(`Failed to fetch services: ${res.statusText}`);
      return [];
    }
    const data = await res.json();
    return data;
  } catch (error) {
    console.error('Error fetching services:', error);
    return [];
  }
}

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const base = 'https://www.guillendentalcare.com';

  const staticRoutes: MetadataRoute.Sitemap = LOCALES.flatMap((locale) =>
    STATIC_FOLDERS.map((folder) => ({
      url: `${base}/${locale}${folder ? `/${folder}` : ''}`,
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: folder === '' ? 1.0 : 0.8,
    }))
  );

  const services = await fetchServiceIds();
  const dynamicRoutes: MetadataRoute.Sitemap = services.flatMap(({ id, updatedAt }) =>
    LOCALES.map((locale) => ({
      url: `${base}/${locale}/service/${id}`,
      lastModified: new Date(updatedAt),
      changeFrequency: 'monthly',
      priority: 0.8,
    }))
  );

  return [...staticRoutes, ...dynamicRoutes];
}
